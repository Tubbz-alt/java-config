# Copyright 1999-2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id: $

# Based on kernel.eselect

DESCRIPTION="Manage the java system-vm"
MAINTAINER="axxo@gentoo.org"
SVN_DATE='$Date: $'
VERSION=$(svn_date_to_version "${SVN_DATE}" )

VM_BASE=${ROOT}/etc/java-config/vms
VM_SYSTEM=${VM_BASE}/system-vm
VM_USER=${HOME}/.gentoo/user-vm

find_targets() {
	local f
	for f in ${VM_BASE}/* ; do
		[[ -d ${f} && ! -L ${f} ]] && echo $(basename ${f})
	done
}

sym_to_vm() {
	basename $(readlink "${1}")
}

### show action ###

describe_show() {
	echo "Show the current system-vm"
}

do_show() {
	my_show ${VM_SYSTEM} 'system-vm'
}

describe_show-user() {
	echo "Show the current user-vm"
}

do_show-user() {
	my_show ${VM_USER} 'user-vm'
}

my_show() {
	local symlink=${1} vm_type=${2}
	write_list_start "Current ${vm_type}"
	if [[ -L "${symlink}" ]] ; then
		write_kv_list_entry "$(sym_to_vm ${symlink})" ""
	else
		write_kv_list_entry "(unset)" ""
	fi
}

### list action ###

describe_list() {
	echo "List available vms"
}

do_list() {
	targets=( $(find_targets) )
	write_list_start "Available java vms:"
	if [[ -n ${targets[@]} ]] ; then
		local i system_name user_name
	
		[[ -L ${VM_SYSTEM} ]] && system_name=$(sym_to_vm ${VM_SYSTEM})
		[[ -L ${VM_USER} ]] && user_name=$(sym_to_vm ${VM_USER})

		for (( i = 0 ; i < ${#targets[@]} ; i = i + 1 )) ; do
			if [[ ${targets[${i}]} == ${system_name} ]]; then
				targets[${i}]="${targets[${i}]} $(highlight 'system-vm')"
			fi
			if [[ ${targets[${i}]} == ${user_user} ]]; then
				targets[${i}]="${targets[${i}]} $(highlight 'user-vm' )"
			fi
		done
		write_numbered_list "${targets[@]}"
	else
		write_kv_list_entry "(none found)" ""
	fi
}

### set action ###

describe_set() {
	echo "Set a new system vm"
}

do_set() {
	my_set ${VM_SYSTEM} ${1}
}

describe_set-user() {
	echo "Set a new user vm"
}

do_set-user() {
	my_set ${VM_USER} ${1} 
}

my_set() {
	local target=${2} symlink=${1}
	if [[ -z ${target} ]] ; then
		# no parameter
		die -q "You didn't tell me what to set the symlink to"

	elif [[ -L "${symlink}" ]] ; then
		set_symlink "${target}" "${symlink}"  || die -q "Couldn't set a new symlink"

	elif [[ -e "${symlink}" ]] ; then
		# we have something strange
		die -q "Sorry, ${symlink}"

	else
		set_symlink "${target}" "${symlink}"|| die -q "Couldn't set a new symlink"
	fi

}

set_symlink() {
	local target=${1} symlink=${2}
	if is_number "${target}" ; then
		targets=( $(find_targets) )
		target=${targets[$(( ${target} - 1 ))]}
	fi
	if [[ -z ${target} ]] ; then
		die -q "Target \"${1}\" doesn't appear to be valid!"
	elif [[ -d "${VM_BASE}/${target}" ]] ; then
		local sym_dir=$(dirname ${symlink})
		if [[ ! -d ${sym_dir} ]]; then
			mkdir -p ${sym_dir} || die -q "Could not create ${my_dir}"
		fi
		ln -snf "${VM_BASE}/${target}" "${symlink}"
	else
		die -q "Target \"${1}\" doesn't appear to be valid!"
	fi
}

# vim: set ft=eselect :
