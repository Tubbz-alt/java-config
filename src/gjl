#!/usr/bin/python -E
# -*- coding: UTF-8 -*-

# Copyright 2004-2005 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

import sys
sys.path = ['/usr/share/java-config-2/pym']+sys.path

from java_config import __version__
from java_config.OutputFormatter import *
from java_config.EnvironmentManager import *
from java_config.VersionManager import *

from commands import getoutput
from string import join
from sets import Set
from optparse import OptionParser, make_option, OptionValueError
import os
from os.path import basename
import sys

# Needs some cleanup!
# Someone please?

def get_needed_packages(package):
    unresolved = Set()
    unresolved.add(package)

    resolved = Set()

    while len(unresolved) > 0:
        pkg = unresolved.pop()
        resolved.add(pkg)

        for dep in pkg.deps():
            p = manager.get_package(dep[-1])

            if p not in resolved:
                unresolved.add(p)

    return resolved

def get_needed_target(pkg):
    highest_target = None
    for pkg in get_needed_packages(pkg):
        target = pkg.query("TARGET")
        if highest_target:
            if target > highest_target:
                highest_target = target
        else:
            highest_target = target

    return highest_target


def get_pkg_args(package):
    missing_deps = Set()

    classpath = manager.build_dep_path([package.name()], "CLASSPATH", missing_deps)
    library = manager.build_dep_path([package.name()], "LIBRARY_PATH", missing_deps)

    if len(missing_deps) > 0:
        for dep in missing_deps:
            printer._printError("Dependency package %s was not found!" % dep)

    return ':'.join(classpath), ':'.join(library)

def abort(msg):
    printer._printError(msg)
    sys.exit(1)


# Options:
def get_vm(pkg):
    target = get_needed_target(pkg)
    if target:
        needed = ">=virtual/jre-%s" % ( target )
        if verman.version_satisfies(needed, manager.get_active_vm()):
            return None
        else:
            return verman.get_vm(needed)
    else:
        return verman.get_vm(pkg.query("VM"))

def get_args(pkg):
    args=""

    classpath, library = get_pkg_args(pkg)
    if classpath:
        envcp = os.getenv('CLASSPATH')

        if envcp:
            classpath = ':'.join((envcp, classpath))

        args += ' -classpath %s' % (classpath)

    if library:
        args += ' -Djava.library.path="%s"' % (library)

    if args:
        return args
    else:
        return None

def get_jar(pkg, gjar):
    jars = pkg.classpath()
    if jars:
        for jar in jars.split(':'):
            if gjar == basename(jar):
                return jar
            if normpath(gjar) == normpath(jar):
                return gjar
    return None

def normpath(mypath):
    newpath = os.path.normpath(mypath)
    if newpath.startswith('//'):
        return newpath[1:]
    return newpath

if __name__ == '__main__':
    usage =  "%prog [options]\n\n"
    usage += "Java Utility Version " + str(__version__) + "\n"
    usage += "Copyright 2004-2005 Gentoo Foundation\n"
    usage += "Distributed under the terms of the GNU General Public License v2\n"
    usage += "Please contact the Gentoo Java Herd <java@gentoo.org> with problems."

    options_list = [
                     make_option ("-p", "--package",  action="store", type="string", dest="package", help="The package"),
                     make_option ("-v", "--get-vm",   action="store_true", dest="get_vm"),
                     make_option ("-a", "--get-args", action="store_true", dest="get_args"),
                     make_option ("-j", "--get-jar", action="store", type="string", dest="jar")
                   ]

    parser = OptionParser(usage, options_list)
    (options, args) = parser.parse_args()

    global printer, manager, verman
    printer = OutputFormatter(True, True)
    manager = EnvironmentManager()
    verman = VersionManager()

    if not options.package:
        abort("Too dumb todo anything without -p")

    pkg = manager.get_package(options.package)
    if not pkg:
        abort("Invalid package: %s" % ( options.package ) )

    if options.get_vm:
        vm = get_vm(pkg)
        if vm:
            print 'gjl_vm="%s"' % ( vm )

    if options.get_args:
        args = get_args(pkg)
        if args:
            print 'gjl_args="%s"' % ( args )

    if options.jar:
        jar = get_jar(pkg, options.jar)
        if jar:
            print 'gjl_starte="-jar %s"' % ( jar )
        else:
            abort("Couldn't find %s" % ( options.jar ) )

# vim:set expandtab tabstop=4 shiftwidth=4 softtabstop=4 nowrap:
