#!/usr/bin/python -E
# -*- coding: UTF-8 -*-

# Copyright 2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

# Author: Saleem Abdulrasool <compnerd@gentoo.org>
# Maintainer: Gentoo Java Herd <java@gentoo.org>
# Java Subsystem Configuration Utility for Gentoo Linux

# ChangeLog
# Saleem A. <compnerd@gentoo.org>
#     December 30, 2004 - Initial Rewrite
#                       - Based on the collective works of the following:
#                         {karltk,axxo,aether}@gentoo.org

__version__ = '$Revision: 2.0$'[11:-1]

import OutputFormatter,EnvironmentManager
import os

from JavaErrors import *
from commands import getoutput
from optparse import OptionParser, make_option
from string   import join


if __name__ == '__main__':
   usage = "java-config [options]\n\n"
   usage += "Java Configuration Utility Version " + str(__version__) + "\n"
   usage += "Copyright 2004 Gentoo Foundation\n"
   usage += "Distributed under the terms of the GNU General Public License v2\n"
   usage += "Please contact the Gentoo Java Herd <java@gentoo.org> with problems."

   options_list = [
                     make_option ("-V", "--version",                 action="store_true",  default=False, dest="optVersion",      help="Print version information"),
                     make_option ("-n", "--nocolor",                 action="store_false", default=True,  dest="optColor",        help="Disable color output"),
                     make_option ("-J", "--java",                    action="store_true",  default=False, dest="optJavaExec",     help="Print the location of the java executable"),
                     make_option ("-c", "--javac",                   action="store_true",  default=False, dest="optJavacExec",    help="Print the location of the javac executable"),
                     make_option ("-j", "--jar",                     action="store_true",  default=False, dest="optJarExec",      help="Print the location of the jar executable"),
                     make_option ("-O", "--jdk-home",                action="store_true",  default=False, dest="optJDKHome",      help="Print the location of the active JDK home"),
                     make_option ("-o", "--jre-home",                action="store_true",  default=False, dest="optJREHome",      help="Print the location of the active JRE home"),
                     make_option ("-f", "--show-active-vm",          action="store_true",  default=False, dest="optShowActiveVM", help="Print the active Virtual Machine"),
                     make_option ("-v", "--java-version",            action="store_true",  default=False, dest="optShowJavaVer",  help="Print version information for the active VM"),
                     make_option ("-p", "--classpath",               action="store",                      dest="packages",        help="Print entries in the environment classpath"),
                     make_option ("-g", "--get-env",                 action="store",                      dest="env",             help="Print an environment variable from the active VM"),
                     make_option ("-e", "--exec",                    action="store",                      dest="exe",             help="Execute something which is in JAVA_HOME"),
                     make_option ("-l", "--list-available-packages", action="store_true",  default=False, dest="optListPackages", help="List all available packages on the system."),
                     make_option ("-L", "--list-available-vms",      action="store_true",  default=False, dest="optListJVMs",     help="List available Java Virtual Machines"),
                     make_option ("-P", "--print",                   action="store",                      dest="vm",              help="Print the environment for the specified VM"),
                     make_option ("-S", "--set-system-vm",           action="store",                      dest="SystemVM",        help="Set the default Java VM for the system"),
                     make_option ("-s", "--set-user-vm",             action="store",                      dest="UserVM",          help="Set the default Java VM for the user"),
                     make_option ("-A", "--set-system-classpath",    action="store",                      dest="SetSystemCP",     help="Set the system classpath to include the libraries"),
                     make_option ("-a", "--set-user-classpath",      action="store",                      dest="SetUserCP",       help="Set the user classpath to include the libraries"),
                     make_option ("-B", "--append-system-classpath", action="store",                      dest="AppendSystemCP",  help="Append the libraries to the system classpath"),
                     make_option ("-b", "--append-user-classpath",   action="store",                      dest="AppendUserCP",    help="Append the libraries to the user classpath"),
                     make_option ("-X", "--clean-system-classpath",  action="store_true",  default=False, dest="optCleanSysCP",   help="Clean the current system classpath"),
                     make_option ("-x", "--clean-user-classpath",    action="store_true",  default=False, dest="optCleanUsrCP",   help="Clean the current user classpath"),
                     make_option ("-i", "--library",                 action="store",                      dest="library",         help="Print entries in the package library")
                  ]

   parser = OptionParser(usage, options_list)
   (options, args) = parser.parse_args()

   printer = OutputFormatter.OutputFormatter(options.optColor, True)
   manager = EnvironmentManager.EnvironmentManager()

   #########################################################################

   if options.optVersion:
      printer._print("%H%BJava Configuration Utility %GVersion " + str(__version__))
      raise SystemExit()

   if options.optJavaExec:
      try:
         printer._print(manager.get_active_vm().find_exec('java'))
      except PermissionError:
         printer._printError("The java executable was not found in the Java path")

   if options.optJavacExec:
      try:
         printer._print(manager.get_active_vm().find_exec('javac'))
      except PermissionError:
         printer._printError("The javac executable was not found in the Java path")

   if options.optJarExec:
      try:
         printer._print(manager.get_active_vm().find_exec('jar'))
      except PermissionError:
         printer._printError("The jar executable was not found in the Java path")

   if options.optJDKHome:
      try:
         printer._print(manager.get_active_vm().query('JDK_HOME'))
      except EnvironmentUndefinedError:
         print

   if options.optJREHome:
      try:
         printer._print(manager.get_active_vm().query('JRE_HOME'))
      except EnvironmentUndefinedError:
         print

   if options.optShowActiveVM:
      printer._print(manager.get_active_vm().name())

   if options.optShowJavaVer:
      try:
         printer._print(getoutput('%s -version' % manager.get_active_vm().find_exec('java')))
      except PermissionError:
         printer._printError("The java executable was not found in the Java path")

   if options.packages:
      packages = options.packages.split(',')
      classpath = manager.query_packages(packages, "CLASSPATH") 

      for package in packages:
         printer._printError("Package %s was not found!" % package)

      printer._print(join(classpath,':'))

   if options.env:
      try:
         for env in options.env.split(','):
            printer._print(manager.get_active_vm().query(env))
      except EnvironmentUndefinedError:
         print

   if options.exe:
      for cmd in iter(options.exe.split(',')):
         os.system(cmd)

   if options.optListPackages:
      for package in manager.get_packages():
         printer._print("[%s]\t%s\t(%s)" % (package.name, package.description(), package.file))

   if options.optListJVMs:
      vm_list = manager.get_virtual_machines()
      i = 1 
      for count in iter(vm_list):
         vm = vm_list[count]
         if vm.active:
            printer._print('%H%G' + '*) %s\t[%s]\t(%s)' % (vm.query('VERSION'),vm.name(),vm.filename()) + '%$')
         else:
            if vm.is_jdk():
               printer._print('%H' + '%i) %s\t[%s]\t(%s)' % (i,vm.query('VERSION'),vm.name(),vm.filename()) + '%$')
            else:
               printer._print('%i) %s\t[%s]\t(%s)' % (i,vm.query('VERSION'),vm.name(),vm.filename()) + '%$')
         i += 1

   # TODO: FIX THIS!!
   # Should be able to print in CSH or SH compatible format
   if options.vm:
      config = manager.get_vm(options.vm).get_config()
      manager.create_env_entry(manager.get_vm(options.vm), printer, "export %s=%s")

   if options.SystemVM:
      vm = manager.get_vm(options.SystemVM)
      # TODO: MAKE THIS MODULAR!!
      config = os.path.join('/', 'etc', 'env.d', '20java')
      deploy = os.path.join('/', 'etc', '.java', '.deployment', 'deployment.properties')
         
      if os.getuid() is 0:
         if vm.is_jre():
            printer._printWarning("The specified VM is a JRE!  It is suggested you use a JDK!")

         try:
            manager.set_vm(vm, config, None, deploy)

            # Update the profile which contains updates
            os.system("env-update")

            printer._printAlert("If you want to use java in your current session, you should update\n\t   your environment by running:")
            printer._print("\t   %Hsource /etc/profile")
         except PermissionError:
            printer._printError("You do not have enough permissions to set the system VM!")
      else:
         printer._printError("You do not have enough permissions to set the system VM!")

   if options.UserVM:
      vm = manager.get_vm(options.UserVM)
      # TODO: MAKE THIS MODULAR!!
      config_sh = os.path.join(os.environ.get("HOME"), '.gentoo', 'java.sh')
      config_csh = os.path.join(os.environ.get("HOME"), '.gentoo', 'java.csh')
      deploy = os.path.join(os.environ.get("HOME"), '.java', '.deployment', 'deployment.properties')

      if os.getuid() is 0:
         printer._printError("The user 'root' should always use the System VM")
      else:
         # TODO: MAKE THIS MODULAR!!
         env_dir = os.path.join(os.environ.get("HOME"), '.gentoo')

         if os.path.exists(env_dir) and not os.path.isdir(env_dir):
            printer._printError(os.path.join(os.environ.get("HOME"), '.gentoo') + " exists, but is not a directory!")
         else:
            try:
               manager.set_vm(vm, config_sh, config_csh, deploy)
               printer._printAlert("If you want to use java in your current session, you should update\n\t   your environment by running:")
               printer._print("\t   %Hsource ~/.gentoo/java")
            except PermissionError:
               printer._printError("You do not have enough permissions to set the VM!")

   if options.library:
      packages = options.library.split(',')
      library = manager.query_packages(packages, "LIBRARY_PATH")

      for package in packages:
         printer._printError("Package %s was not found!" % package)

      printer._print(join(library, ':'))

   if options.SetSystemCP:
      # TODO: MAKE THIS MODULAR!!
      env_file = os.path.join('/', 'etc', 'env.d', '21java-classpath')
      
      if os.getuid() is 0:
         manager.set_classpath(env_file, SetSystemCP.split(","))

         printer._printAlert("If you want to use java in your current session, you should update\n\t   your environment by running:")
         printer._print("\t   %Hsource /etc/profile")
      else:
         printer._printError("You do not have enough permissions to set the system classpath!")

   if options.SetUserCP:
      # TODO: MAKE THIS MODULAR!!
      env_file = os.path.join(os.environ.get("HOME"), '.gentoo', 'java-classpath')

      manager.set_classpath(env_file, SetUserCP.split(","))

   if options.AppendSystemCP:
      # TODO: MAKE THIS MODULAR!!
      env_file = os.path.join('/', 'etc', 'env.d', '21java-classpath')

      if os.getuid() is 0:
         manager.append_classpath(env_file, AppendSystemCP.split(','))
         os.system("env-update")

         printer._printAlert("If you want to use java in your current session, you should update\n\t   your environment by running:")
         printer._print("\t    %Hsource /etc/profile")
      else:
         printer._printError("You do not have enough permissioins to append to the system classpath!")

   if options.AppendUserCP:
      # TODO: MAKE THIS MODUlAR!!
      env_file = os.path.join(os.environ.get("HOME"), '.gentoo', 'java-classpath')

      manager.append_classpath(env_file, AppendUserCP.split(','))

      printer._printAlert("If you want to use java in your current session, you should update\n\t   your environment by running:")
      printer._print("\t   %Henv-update && source /etc/profile")

   if options.optCleanSysCP:
      # TODO: MAKE THIS MODULAR!!
      env_file = os.path.join('/', 'etc', 'env.d', '21java-classpath')

      if os.getuid() is 0:
         manager.clean_classpath(env_file)
         os.system("env-update")

         printer._printAlert("If you want to use java in your current session, you should update\n\t   your environment by running:")
         printer._print("\t   %Hsource /etc/profile")
      else:
         printer._printError("You do not have enough permissions to clean the system classpath!")

   if options.optCleanUsrCP:
      # TODO: MAKE THIS MODULAR!!
      env_file = os.path.join(os.environ.get("HOME"), '.gentoo', 'java-classpath')

      manager.clean_classpath(env_file)

      printer._printAlert("If you want to use java in your current session, you should update\n\t   your environment by running:")
      printer._print("\t   %Henv-update && source /etc/profile")
# vim:set expandtab tabstop=3 shiftwidth=3 softtabstop=3:
