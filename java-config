#!/usr/bin/python -E
# -*- coding: UTF-8 -*-

# Copyright 2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

# Author: Saleem Abdulrasool <compnerd@gentoo.org>
# Maintainer: Gentoo Java Herd <java@gentoo.org>
# Java Subsystem Configuration Utility for Gentoo Linux

# ChangeLog
# Saleem A. <compnerd@gentoo.org>
#     December 30, 2004 - Initial Rewrite
#                       - Based on the collective works of the following:
#                         {karltk,axxo,aether}@gentoo.org

__version__ = '$Revision: 2.0$'[11:-1]

import OutputFormatter,EnvironmentManager,JavaErrors
import os

from commands import getoutput
from optparse import OptionParser, make_option

if __name__ == '__main__':
   usage = "java-config [options]\n\n"
   usage += "Java Configuration Utility Version " + str(__version__) + "\n"
   usage += "Copyright 2004 Gentoo Foundation\n"
   usage += "Distributed under the terms of the GNU General Public License v2\n"
   usage += "Please contact the Gentoo Java Herd <java@gentoo.org> with problems."

   options_list = [
                     make_option ("-V", "--version",            action="store_true",  default=False, dest="optVersion",      help="Print version information"),
                     make_option ("-n", "--nocolor",            action="store_false", default=True,  dest="optColor",        help="Disable color output"),
                     make_option ("-J", "--java",               action="store_true",  default=False, dest="optJavaExec",     help="Print the location of the java executable"),
                     make_option ("-c", "--javac",              action="store_true",  default=False, dest="optJavacExec",    help="Print the location of the javac executable"),
                     make_option ("-j", "--jar",                action="store_true",  default=False, dest="optJarExec",      help="Print the location of the jar executable"),
                     make_option ("-O", "--jdk-home",           action="store_true",  default=False, dest="optJDKHome",      help="Print the location of the active JDK home"),
                     make_option ("-o", "--jre-home",           action="store_true",  default=False, dest="optJREHome",      help="Print the location of the active JRE home"),
                     make_option ("-f", "--show-active-vm",     action="store_true",  default=False, dest="optShowActiveVM", help="Print the active Virtual Machine"),
                     make_option ("-v", "--java-version",       action="store_true",  default=False, dest="optShowJavaVer",  help="Print version information for the active VM"),
                     make_option ("-L", "--list-available-vms", action="store_true",  default=False, dest="optListJVMs",     help="List available Java Virtual Machines"),
                     make_option ("-S", "--set-system-vm",      action="store",                      dest="SystemVM",        help="Set the default Java VM for the system."),
                     make_option ("-e", "--exec",               action="store",                      dest="exe",             help="Execute something which is in JAVA_HOME")
                  ]

   parser = OptionParser(usage, options_list)
   (options, args) = parser.parse_args()

   printer = OutputFormatter.OutputFormatter(options.optColor, True)

   try:
      manager = EnvironmentManager.EnvironmentManager()
   except JavaErrors.EnvironmentUndefinedError:
      printer._printError("No JAVA_HOME available! Please set your Java Virtual Machine")
      sys.exit(-1)
   except JavaErrors.InvalidConfigError:
      printer._printError("Invalid configuration file encountered!")
      
   if options.optVersion:
      printer._print("%H%BJava Configuration Utility %GVersion " + str(__version__))
      raise SystemExit()

   if options.optJavaExec:
      try:
         printer._print(manager.find_exec('java'))
      except JavaErrors.PermissionError:
         printer._printError("The java executable was not found in the Java path")

   if options.optJavacExec:
      try:
         printer._print(manager.find_exec('javac'))
      except JavaErrors.PermissionError:
         printer._printError("The javac executable was not found in the Java path")

   if options.optJarExec:
      try:
         printer._print(manager.find_exec('jar'))
      except JavaErrors.PermissionError:
         printer._printError("The jar executable was not found in the Java path")

   if options.optJDKHome:
      try:
         printer._print(manager.query_variable('JDK_HOME'))
      except JavaErrors.EnvironmentUndefinedError:
         print

   if options.optJREHome:
      try:
         printer._print(manager.query_variable('JRE_HOME'))
      except JavaErrors.EnvironmentUndefinedError:
         print

   if options.optShowActiveVM:
      printer._print(manager.get_active_vm())

   if options.optShowJavaVer:
      try:
         printer._print(getoutput('%s -version' % manager.find_exec('java')))
      except JavaErrors.PermissionError:
         printer._printError("The java executable was not found in the Java path")

   if options.exe:
      for cmd in iter(options.exe[0].split(',')):
         os.system(cmd)

   if options.optListJVMs:
      vm_list = manager.get_virtual_machines()
      i = 1 
      for (vm,count) in iter(vm_list):
         if manager.is_active_vm(vm_list[(vm,count)]['JAVA_HOME']):
            printer._print('%H%G' + '*) %s\t[%s]\t(/etc/env.d/java/%s)' % (vm_list[(vm,count)]['VERSION'],vm[2:],vm) + '%$')
         else:
            printer._print('%H' + '%i) %s\t[%s]\t(/etc/env.d/java/%s)' % (i,vm_list[(vm,count)]['VERSION'],vm[2:],vm) + '%$')
         i += 1

   if options.SystemVM:
      
      vm = manager.get_vm(options.SystemVM)

      if vm['PROVIDES_TYPE'] == "JRE":
         printer._printWarning("The specified VM is a JRE!  It is suggested you use a JDK!")
         
      try:
         manager.set_vm(vm, '/etc/env.d/20java', '/etc/.java/.deployment/deployment.properties')
         printer._printAlert("If you want to use java in your current session, you should update\n\t   your environment by running:")
         printer._print("\t   %Hsource /etc/profile")
      except JavaErrors.PermissionError:
         printer._printError("You do not have enough permissions to set the system VM")

# vim:set expandtab tabstop=3 shiftwidth=3:
