#!/usr/bin/env python
# -*- coding: UTF-8 -*-

# Copyright 2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

# Author: Saleem Abdulrasool <compnerd@gentoo.org>
# Maintainer: Gentoo Java Herd <java@gentoo.org>
# Java Subsystem Configuration Utility for Gentoo Linux

# ChangeLog
# Saleem A. <compnerd@gentoo.org>
#     December 30, 2004 - Initial Rewrite
#                       - Based on the collective works of the following:
#                         {karltk,axxo,aether}@gentoo.org

__version__ = '$Revision: 2.0$'[11:-1]

import JavaErrors,VM,Package
import os,glob

class EnvironmentManager:
   virtual_machines = {} 
   packages = []
   
   def __init__(self):
      # Get JAVA_HOME
      environ_path = [
                        os.path.join(os.environ.get('HOME'), '.gentoo', 'java'),
                        os.path.join('/', 'etc', 'env.d', '20java')
                     ]

      self.JAVA_HOME = None

      for file in environ_path:
         try:
            stream = open(file, 'r')
         except IOError:
            continue
         
         read = stream.readline()
         while read:
            if read.strip().startswith('JAVA_HOME'):
               stream.close()
               self.JAVA_HOME = read.split('=', 1)[-1].strip()
               break
            else:
               read = stream.readline()
         stream.close()      

      # Collect the Virtual Machines
      # TODO: MAKE THIS MODULAR!
      if os.path.isdir('/etc/env.d/java'):
         try:
            count = 1
            for file in os.listdir('/etc/env.d/java'):
               conf = os.path.join('/etc/env.d/java', file)

               if file.startswith("20"):
                  vm = None

                  try:
                     vm = VM.VM(conf)
                  except JavaErrors.InvalidConfigError:
                     pass
                  except JavaErrors.PermissionError:
                     pass

                  if vm.query('JAVA_HOME') == self.JAVA_HOME:
                     vm.set_active()

                  self.virtual_machines[count] = vm
                  count += 1
         except OSError:
            pass

      # Collect the packages
      # TODO: MAKE THIS MODULAR!
      packages_path = os.path.join('/', 'usr', 'share', '*', 'package.env')
      for package in iter(glob.glob(packages_path)):
         self.packages.append(Package.Package(package,os.path.basename(os.path.dirname(package))))

   def get_active_vm(self):
      vm_list = self.get_virtual_machines()

      for count in iter(vm_list):
         if vm_list[count].active:
            return vm_list[count]

   def get_virtual_machines(self):
      return self.virtual_machines

   def get_packages(self):
      return self.packages

   def get_vm(self, machine):
      vm_list = self.get_virtual_machines()
      selected = None

      for count in iter(vm_list):
         vm = vm_list[count]

         if str(machine).isdigit():
            if int(machine) is count:
               return vm
         else:
            # Check if the vm is specified via env file
            if machine == vm.filename():
               return vm 

            # Check if the vm is specified by name 
            elif machine == vm.name():
               return vm

            # Check if the vm is specified via JAVA_HOME
            elif machine == vm.query('JAVA_HOME'):
               return vm

            # Check if vm is specified by partial name 
            elif vm.name().startswith(machine):
               selected = vm

      if selected:
         return selected
      else:
         return None

   def set_vm(self, vm, env_file, javaws_file):
      try:
         stream = open(env_file, 'w')
      except IOError:
         raise JavaErrors.PermissionError

      stream.write("# Autogenerated by java-config\n")
      stream.write("# Java Virtual Machine: %s\n\n" % vm.query('VERSION')[1:-1])
      
      try:
         ENV_VARS = vm.get_config['ENV_VARS']
         for (item,value) in vm.get_config.iteritems():
            if item in ENV_VARS:
               stream.write('%s=%s\n' % (item,value))
      except IOError:
         stream.close()
         raise JavaErrors.PermissionError

      stream.close()

      # Create the javaws property file
      # Resolves bug #69542

      try:
         if not os.path.exists(javaws_file):
            os.makedirs(os.path.dirname(javaws_file))
         stream = open(javaws_file, 'w')
      except IOError:
         raise JavaErrors.PermissionError

      stream.write("# Autogenerated by java-config\n")
      stream.write("deployment.javaws.jre.0.platform=" + vm.query('PROVIDES_VERSION'))
      stream.write("deployment.javaws.jre.0.product=" + vm.query('PROVIDES_VERSION'))
      stream.write("deployment.javaws.jre.0.path=" + vm.find_exec('java'))

      stream.close()

      # Update the profile which contains updates
      os.system("env-update")
 
# vim:set expandtab tabstop=3 shiftwidth=3 softtabstop=3:
